*************************
* Using vimdiff in git
*************************
https://stackoverflow.com/questions/3713765/viewing-all-git-diffs-with-vimdiff

> git config --global diff.tool vimdiff
> git config --global difftool.prompt false
> git config --global alias.d difftool

Typing git d yields the expected behavior, typing :wq in vim cycles to the next file in the changeset.

***********************************************
Compare local file to latest checked-in version
***********************************************
> git d HEAD [filename]

******************************************************************************
Undo local changes - 
See: https://docs.gitlab.com/ee/topics/git/numerous_undo_possibilities_in_git/
******************************************************************************
Before add:
> git checkout -- <file>
Discard all local changes to all files permanently:
> git reset --hard

After add:
> git reset HEAD <file>

**********************************************************************
Error: "An application wants to access the private key but its locked"
**********************************************************************
https://unix.stackexchange.com/questions/90853/how-can-i-run-ssh-add-automatically-without-a-password-prompt
> ssh-add ~/.ssh/id_rsa

*******************************************************************
Error: "Could not open a connection to your authentication agent." (on ceb-slurm)
*******************************************************************
> ssh-agent
SSH_AUTH_SOCK=/tmp/ssh-C2NYmLGspa8S/agent.9995; export SSH_AUTH_SOCK;
SSH_AGENT_PID=9997; export SSH_AGENT_PID;
echo Agent pid 9997;
> eval $(ssh-agent)
Agent pid 10508
> env | grep SSH
SSH_AGENT_PID=10508
SSH_CLIENT=130.14.109.13 59834 22
SSH_TTY=/dev/pts/2
SSH_AUTH_SOCK=/tmp/ssh-OyzrD5naJFEQ/agent.10507
SSH_CONNECTION=130.14.109.13 59834 130.14.109.45 22
> ssh-add ~/.ssh/id_rsa_mbopfNIH

*******************************************************************
* Firewall changes necessitating use of proxy server - 04-Nov-2021
*******************************************************************
See https://lhcrts.nlm.nih.gov/SelfService/Display.html?id=107161
Need the following lines in ~/.ssh/config:

Host github.com
    HostName github.com
    User git
    IdentityFile ~/ssh/id_rsa_mbopfNIH
    ProxyCommand nc --proxy 130.14.49.92:3128 %h %p

To test, run:
$ sh -o ProxyCommand='nc --proxy 130.14.49.92:3128 %h %p' git@github.com

Then make sure you run the ssh-agent commands above and "git push origin master"
should work as normal without entering password (hopefully).

************************************************
* The following instructions courtesy of Karl Broman 
* https://kbroman.org/github_tutorial/pages/init.html
************************************************

-----------------------
A new repo from scratch
-----------------------
Say you’ve just got some data from a collaborator and are about to start exploring it.

Create a directory to contain the project.
Go into the new directory.
Type git init.
Write some code.
Type git add to add the files (see the typical use page).
Type git commit.
The first file to create (and add and commit) is probably a ReadMe file, either as plain text or with Markdown, describing the project.

Markdown allows you to add a bit of text markup, like hyperlinks, bold/italics, or to indicate code with a monospace font. Markdown is easily converted to html for viewing in a web browser, and GitHub will do this for you automatically.


-----------------------
A new repo from an existing project
-----------------------
Say you’ve got an existing project that you want to start tracking with git.

Go into the directory containing the project.
Type git init.
Type git add to add all of the relevant files.
You’ll probably want to create a .gitignore file right away, to indicate all of the files you don’t want to track. Use git add .gitignore, too.
Type git commit.


-----------------------
Connect it to github
-----------------------
You’ve now got a local git repository. You can use git locally, like that, if you want. But if you want the thing to have a home on github, do the following.

Go to github.
Log in to your account.
Click the new repository button in the top-right. You’ll have an option there to initialize the repository with a README file, but I don’t.
Click the “Create repository” button.
Now, follow the second set of instructions, “Push an existing repository…”

$ git remote add origin git@github.com:username/new_repo
$ git push -u origin master
Actually, the first line of the instructions will say

$ git remote add origin https://github.com/username/new_repo
But I use git@github.com:username/new_repo rather than https://github.com/username/new_repo, as the former is for use with ssh (if you set up ssh as I mentioned in “Your first time”, then you won’t have to type your password every time you push things to github). If you use the latter construction, you’ll have to type your github password every time you push to github.

----------------------------------
Check if local in sync with remote
----------------------------------
# Following will affect references but not update files 
$ git remote -v update
-- OR --
$ git fetch

# This will check for differences on local branch between remote and local after running above:
$ git status -uno

# Follow instructions to sync up with remote

----------------------------------
Reset remote after a change in owner
----------------------------------
$ git remote set-url origin new_url
See: https://docs.github.com/en/repositories/creating-and-managing-repositories/transferring-a-repository

------------------------------
error: src refspec master does not match any.
------------------------------
# This error occurs if there is no branch specifically named "master"
[lhc-lx-mbopf|560]$ git push origin master
error: src refspec master does not match any.
error: failed to push some refs to 'git@github.com:mbopf/mwb_common.git'

# Fix is to use whatever correct top branch is (probably "main")
[lhc-lx-mbopf|561]$ git show-ref
4f8e28cd067ee045d77cfd906af159d059337db8 refs/heads/main
4f8e28cd067ee045d77cfd906af159d059337db8 refs/remotes/origin/HEAD
4f8e28cd067ee045d77cfd906af159d059337db8 refs/remotes/origin/main

[lhc-lx-mbopf|562]$ git push origin main
Everything up-to-date


